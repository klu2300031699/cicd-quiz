Create a complete, professional quiz website using Python and Django framework. Use SQLite as the database. The website should be fully functional, responsive (use Bootstrap for styling), and secure. Structure it as a single Django project named "quiz_site" with an app named "quiz_app". Include all necessary models, views, templates, URLs, forms, and static files. Ensure everything connects perfectly to the backend.

Core Requirements:

User Authentication: Use Django's built-in auth system. Users must register/login to access quizzes. Include login, register, and logout pages. Protect quiz-related pages with @login_required decorator. Default admin/superuser: username/email "Gnanesh@gmail.com", password "Gnanesh@1561". Create this superuser automatically if possible, or instruct in setup.
Navigation Bar: A responsive navbar on all pages with links: Home, Quizzes, Results, Login/Register (shows "Logout" if logged in). Use Bootstrap for a clean, professional look.
Home Page:
Welcome message for logged-in users.
A prominent "Start Quiz" button. When clicked, redirect to the Quizzes page.
If not logged in, prompt to login/register.
Quizzes Page (User View):
Display available quizzes as cards/boxes (e.g., "Quiz on Git and Docker", "Quiz on Python Basics"). Each box shows quiz name, description (brief), and a "Start Quiz" button.
When "Start Quiz" is clicked, load the quiz: Display questions one by one or all at once (use a form). Support quiz types like timed quizzes (use JavaScript timer if needed).
Quiz submission: Calculate score as percentage (e.g., correct answers / total * 100). After submission, show results page with: percentage score, user's selected options, correct answers highlighted, and explanations if added.
Quiz Type Support: For random quizzes, if a quiz has more questions than needed (e.g., 30 questions for 20 slots), randomly select and display the required number using Django's random queryset sampling.
Results Page (User View):
List all quizzes the user has attempted, with date, score (percentage), and a "View Details" button.
On details view: Show full breakdown (questions, user's answers, correct answers, score).
Admin Panel (Separate Login or Integrated):
Accessible only to superuser/admin (use Django admin or custom views).
Sections:
User Management: List all users with details (email, registration date, total quizzes attempted).
User Results: View all users' quiz results (filter by user/quiz).
Add/Edit Quiz: Form to create quizzes. Fields: Quiz Name (e.g., "Git and Docker"), Quiz Time (duration in minutes, enforce timer), Number of Questions to Show (e.g., 20), Total Questions Available (e.g., 30 for random selection), Quiz Type (choices: 'Fixed' or 'Random' â€“ for Random, sample questions randomly).
Add Questions: Inline formset or multi-step form to add questions. Each question: Text, Options (4 choices, one correct), Correct Answer index, Explanation (optional).
After admin adds a quiz, it becomes visible to users on the Quizzes page.
Database Models:
User: Extend Django's User model if needed (e.g., add profile).
Quiz: Fields - name, description, time_limit (minutes), num_questions (to show), total_questions (available), quiz_type ('fixed' or 'random'), created_by (ForeignKey to User, for admin).
Question: Fields - quiz (ForeignKey to Quiz), text, option_a, option_b, option_c, option_d, correct_option (e.g., 'A'), explanation.
UserQuizAttempt: Fields - user (ForeignKey), quiz (ForeignKey), score (percentage), date_attempted, user_answers (JSONField for storing selected options per question), correct_answers (JSONField for reference).
Ensure relationships: One Quiz has many Questions; One User has many Attempts.
Views and Logic:
Use Class-Based Views (e.g., ListView for quizzes/results, FormView for adding quizzes/questions).
Quiz Taking: Create a view to fetch questions (random.sample if type='random'). Use a single form with dynamic fields or session-based multi-page quiz.
Scoring: On submission, compare user answers to correct ones, save to UserQuizAttempt, redirect to results.
Admin Views: Custom views or extend Django admin for user/results management. Use permissions to restrict to staff.
Templates and Styling:
Base template with navbar, footer.
Use Bootstrap 5 for responsive design (cards for quizzes, modals for confirmations, progress bars for scores).
Quiz page: Clean layout with radio buttons for MCQs, submit button, timer if time_limit >0 (JavaScript countdown).
Results: Tables or highlighted lists showing user's choice vs. correct.
Static files: CSS for professional look (e.g., blue theme for quiz site), JS for timer/interactivity.
URLs:
Root: Home.
/quizzes/: List quizzes.
/quizzes/<id>/start/: Take quiz.
/results/: User results.
/admin-panel/: Admin dashboard (login protected).
/accounts/login/, /accounts/register/: Auth pages.
Security and Best Practices:
Use CSRF protection, validate forms.
Prevent duplicate quiz attempts (e.g., one attempt per quiz per user).
Hash passwords (Django default).
Error handling: 404 for invalid quizzes, messages for success/errors (use Django messages framework).
Setup Instructions in Code:
In settings.py: Configure SQLite, installed apps (django.contrib.auth, quiz_app), login redirect to home.
In manage.py shell or a custom management command: Create initial superuser with email "Gnanesh@gmail.com" and password "Gnanesh@1561".
Add 2-3 sample quizzes and questions (e.g., Git/Docker quiz with 5 questions) for testing.
Full Functionality:
Ensure everything works end-to-end: User registers, logs in, takes quiz (random or fixed), submits, views results. Admin logs in, adds quiz with random type (e.g., 30 questions, show 20 random), views users/results.
Test for edge cases: No quizzes available, time expiry (auto-submit), invalid logins.
Make it production-ready: No debug errors, proper redirects.